import {
  require_jsx_runtime
} from "./chunk-4E5JQVNA.js";
import {
  require_react
} from "./chunk-RYHZ5DR2.js";
import {
  __commonJS,
  __toESM
} from "./chunk-J32WSRGE.js";

// node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js
var require_use_sync_external_store_shim_development = __commonJS({
  "node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js"(exports) {
    "use strict";
    (function() {
      function is(x, y) {
        return x === y && (0 !== x || 1 / x === 1 / y) || x !== x && y !== y;
      }
      function useSyncExternalStore$2(subscribe, getSnapshot) {
        didWarnOld18Alpha || void 0 === React2.startTransition || (didWarnOld18Alpha = true, console.error(
          "You are using an outdated, pre-release alpha of React 18 that does not support useSyncExternalStore. The use-sync-external-store shim will not work correctly. Upgrade to a newer pre-release."
        ));
        var value = getSnapshot();
        if (!didWarnUncachedGetSnapshot) {
          var cachedValue = getSnapshot();
          objectIs(value, cachedValue) || (console.error(
            "The result of getSnapshot should be cached to avoid an infinite loop"
          ), didWarnUncachedGetSnapshot = true);
        }
        cachedValue = useState4({
          inst: { value, getSnapshot }
        });
        var inst = cachedValue[0].inst, forceUpdate = cachedValue[1];
        useLayoutEffect2(
          function() {
            inst.value = value;
            inst.getSnapshot = getSnapshot;
            checkIfSnapshotChanged(inst) && forceUpdate({ inst });
          },
          [subscribe, value, getSnapshot]
        );
        useEffect4(
          function() {
            checkIfSnapshotChanged(inst) && forceUpdate({ inst });
            return subscribe(function() {
              checkIfSnapshotChanged(inst) && forceUpdate({ inst });
            });
          },
          [subscribe]
        );
        useDebugValue2(value);
        return value;
      }
      function checkIfSnapshotChanged(inst) {
        var latestGetSnapshot = inst.getSnapshot;
        inst = inst.value;
        try {
          var nextValue = latestGetSnapshot();
          return !objectIs(inst, nextValue);
        } catch (error) {
          return true;
        }
      }
      function useSyncExternalStore$1(subscribe, getSnapshot) {
        return getSnapshot();
      }
      "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
      var React2 = require_react(), objectIs = "function" === typeof Object.is ? Object.is : is, useState4 = React2.useState, useEffect4 = React2.useEffect, useLayoutEffect2 = React2.useLayoutEffect, useDebugValue2 = React2.useDebugValue, didWarnOld18Alpha = false, didWarnUncachedGetSnapshot = false, shim = "undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement ? useSyncExternalStore$1 : useSyncExternalStore$2;
      exports.useSyncExternalStore = void 0 !== React2.useSyncExternalStore ? React2.useSyncExternalStore : shim;
      "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
    })();
  }
});

// node_modules/use-sync-external-store/shim/index.js
var require_shim = __commonJS({
  "node_modules/use-sync-external-store/shim/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_use_sync_external_store_shim_development();
    }
  }
});

// node_modules/react-tweet/dist/twitter-theme/icons/verified.js
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
import s from "C:/Users/Adam Adam/Desktop/shadow/node_modules/react-tweet/dist/twitter-theme/icons/icons.module.css";
var Verified = () => (0, import_jsx_runtime.jsx)("svg", {
  viewBox: "0 0 24 24",
  "aria-label": "Verified account",
  role: "img",
  className: s.verified,
  children: (0, import_jsx_runtime.jsx)("g", {
    children: (0, import_jsx_runtime.jsx)("path", {
      d: "M22.25 12c0-1.43-.88-2.67-2.19-3.34.46-1.39.2-2.9-.81-3.91s-2.52-1.27-3.91-.81c-.66-1.31-1.91-2.19-3.34-2.19s-2.67.88-3.33 2.19c-1.4-.46-2.91-.2-3.92.81s-1.26 2.52-.8 3.91c-1.31.67-2.2 1.91-2.2 3.34s.89 2.67 2.2 3.34c-.46 1.39-.21 2.9.8 3.91s2.52 1.26 3.91.81c.67 1.31 1.91 2.19 3.34 2.19s2.68-.88 3.34-2.19c1.39.45 2.9.2 3.91-.81s1.27-2.52.81-3.91c1.31-.67 2.19-1.91 2.19-3.34zm-11.71 4.2L6.8 12.46l1.41-1.42 2.26 2.26 4.8-5.23 1.47 1.36-6.2 6.77z"
    })
  })
});

// node_modules/react-tweet/dist/twitter-theme/icons/verified-business.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
import s2 from "C:/Users/Adam Adam/Desktop/shadow/node_modules/react-tweet/dist/twitter-theme/icons/icons.module.css";
var VerifiedBusiness = () => (0, import_jsx_runtime2.jsx)("svg", {
  viewBox: "0 0 22 22",
  "aria-label": "Verified account",
  role: "img",
  className: s2.verified,
  children: (0, import_jsx_runtime2.jsxs)("g", {
    children: [
      (0, import_jsx_runtime2.jsxs)("linearGradient", {
        gradientUnits: "userSpaceOnUse",
        id: "0-a",
        x1: "4.411",
        x2: "18.083",
        y1: "2.495",
        y2: "21.508",
        children: [
          (0, import_jsx_runtime2.jsx)("stop", {
            offset: "0",
            stopColor: "#f4e72a"
          }),
          (0, import_jsx_runtime2.jsx)("stop", {
            offset: ".539",
            stopColor: "#cd8105"
          }),
          (0, import_jsx_runtime2.jsx)("stop", {
            offset: ".68",
            stopColor: "#cb7b00"
          }),
          (0, import_jsx_runtime2.jsx)("stop", {
            offset: "1",
            stopColor: "#f4ec26"
          }),
          (0, import_jsx_runtime2.jsx)("stop", {
            offset: "1",
            stopColor: "#f4e72a"
          })
        ]
      }),
      (0, import_jsx_runtime2.jsxs)("linearGradient", {
        gradientUnits: "userSpaceOnUse",
        id: "0-b",
        x1: "5.355",
        x2: "16.361",
        y1: "3.395",
        y2: "19.133",
        children: [
          (0, import_jsx_runtime2.jsx)("stop", {
            offset: "0",
            stopColor: "#f9e87f"
          }),
          (0, import_jsx_runtime2.jsx)("stop", {
            offset: ".406",
            stopColor: "#e2b719"
          }),
          (0, import_jsx_runtime2.jsx)("stop", {
            offset: ".989",
            stopColor: "#e2b719"
          })
        ]
      }),
      (0, import_jsx_runtime2.jsxs)("g", {
        clipRule: "evenodd",
        fillRule: "evenodd",
        children: [
          (0, import_jsx_runtime2.jsx)("path", {
            d: "M13.324 3.848L11 1.6 8.676 3.848l-3.201-.453-.559 3.184L2.06 8.095 3.48 11l-1.42 2.904 2.856 1.516.559 3.184 3.201-.452L11 20.4l2.324-2.248 3.201.452.559-3.184 2.856-1.516L18.52 11l1.42-2.905-2.856-1.516-.559-3.184zm-7.09 7.575l3.428 3.428 5.683-6.206-1.347-1.247-4.4 4.795-2.072-2.072z",
            fill: "url(#0-a)"
          }),
          (0, import_jsx_runtime2.jsx)("path", {
            d: "M13.101 4.533L11 2.5 8.899 4.533l-2.895-.41-.505 2.88-2.583 1.37L4.2 11l-1.284 2.627 2.583 1.37.505 2.88 2.895-.41L11 19.5l2.101-2.033 2.895.41.505-2.88 2.583-1.37L17.8 11l1.284-2.627-2.583-1.37-.505-2.88zm-6.868 6.89l3.429 3.428 5.683-6.206-1.347-1.247-4.4 4.795-2.072-2.072z",
            fill: "url(#0-b)"
          }),
          (0, import_jsx_runtime2.jsx)("path", {
            d: "M6.233 11.423l3.429 3.428 5.65-6.17.038-.033-.005 1.398-5.683 6.206-3.429-3.429-.003-1.405.005.003z",
            fill: "#d18800"
          })
        ]
      })
    ]
  })
});

// node_modules/react-tweet/dist/twitter-theme/icons/verified-government.js
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
import s3 from "C:/Users/Adam Adam/Desktop/shadow/node_modules/react-tweet/dist/twitter-theme/icons/icons.module.css";
var VerifiedGovernment = () => (0, import_jsx_runtime3.jsx)("svg", {
  viewBox: "0 0 22 22",
  "aria-label": "Verified account",
  role: "img",
  className: s3.verified,
  children: (0, import_jsx_runtime3.jsx)("g", {
    children: (0, import_jsx_runtime3.jsx)("path", {
      clipRule: "evenodd",
      d: "M12.05 2.056c-.568-.608-1.532-.608-2.1 0l-1.393 1.49c-.284.303-.685.47-1.1.455L5.42 3.932c-.832-.028-1.514.654-1.486 1.486l.069 2.039c.014.415-.152.816-.456 1.1l-1.49 1.392c-.608.568-.608 1.533 0 2.101l1.49 1.393c.304.284.47.684.456 1.1l-.07 2.038c-.027.832.655 1.514 1.487 1.486l2.038-.069c.415-.014.816.152 1.1.455l1.392 1.49c.569.609 1.533.609 2.102 0l1.393-1.49c.283-.303.684-.47 1.099-.455l2.038.069c.832.028 1.515-.654 1.486-1.486L18 14.542c-.015-.415.152-.815.455-1.099l1.49-1.393c.608-.568.608-1.533 0-2.101l-1.49-1.393c-.303-.283-.47-.684-.455-1.1l.068-2.038c.029-.832-.654-1.514-1.486-1.486l-2.038.07c-.415.013-.816-.153-1.1-.456zm-5.817 9.367l3.429 3.428 5.683-6.206-1.347-1.247-4.4 4.795-2.072-2.072z",
      fillRule: "evenodd"
    })
  })
});

// node_modules/react-tweet/dist/twitter-theme/embedded-tweet.js
var import_jsx_runtime23 = __toESM(require_jsx_runtime(), 1);

// node_modules/react-tweet/dist/twitter-theme/tweet-container.js
var import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1);

// node_modules/clsx/dist/clsx.mjs
function r(e) {
  var t, f, n = "";
  if ("string" == typeof e || "number" == typeof e)
    n += e;
  else if ("object" == typeof e)
    if (Array.isArray(e)) {
      var o = e.length;
      for (t = 0; t < o; t++)
        e[t] && (f = r(e[t])) && (n && (n += " "), n += f);
    } else
      for (f in e)
        e[f] && (n && (n += " "), n += f);
  return n;
}
function clsx() {
  for (var e, t, f = 0, n = "", o = arguments.length; f < o; f++)
    (e = arguments[f]) && (t = r(e)) && (n && (n += " "), n += t);
  return n;
}
var clsx_default = clsx;

// node_modules/react-tweet/dist/twitter-theme/tweet-container.js
import s4 from "C:/Users/Adam Adam/Desktop/shadow/node_modules/react-tweet/dist/twitter-theme/tweet-container.module.css";
import "C:/Users/Adam Adam/Desktop/shadow/node_modules/react-tweet/dist/twitter-theme/theme.css";
var TweetContainer = ({ className, children }) => (0, import_jsx_runtime4.jsx)("div", {
  className: clsx_default("react-tweet-theme", s4.root, className),
  children: (0, import_jsx_runtime4.jsx)("article", {
    className: s4.article,
    children
  })
});

// node_modules/react-tweet/dist/twitter-theme/tweet-header.js
var import_jsx_runtime7 = __toESM(require_jsx_runtime(), 1);

// node_modules/react-tweet/dist/twitter-theme/avatar-img.js
var import_jsx_runtime5 = __toESM(require_jsx_runtime(), 1);
var AvatarImg = (props) => (0, import_jsx_runtime5.jsx)("img", {
  ...props
});

// node_modules/react-tweet/dist/twitter-theme/tweet-header.js
import s6 from "C:/Users/Adam Adam/Desktop/shadow/node_modules/react-tweet/dist/twitter-theme/tweet-header.module.css";

// node_modules/react-tweet/dist/twitter-theme/verified-badge.js
var import_jsx_runtime6 = __toESM(require_jsx_runtime(), 1);
import s5 from "C:/Users/Adam Adam/Desktop/shadow/node_modules/react-tweet/dist/twitter-theme/verified-badge.module.css";
var VerifiedBadge = ({ user, className }) => {
  const verified = user.verified || user.is_blue_verified || user.verified_type;
  let icon = (0, import_jsx_runtime6.jsx)(Verified, {});
  let iconClassName = s5.verifiedBlue;
  if (verified) {
    if (!user.is_blue_verified) {
      iconClassName = s5.verifiedOld;
    }
    switch (user.verified_type) {
      case "Government":
        icon = (0, import_jsx_runtime6.jsx)(VerifiedGovernment, {});
        iconClassName = s5.verifiedGovernment;
        break;
      case "Business":
        icon = (0, import_jsx_runtime6.jsx)(VerifiedBusiness, {});
        iconClassName = null;
        break;
    }
  }
  return verified ? (0, import_jsx_runtime6.jsx)("div", {
    className: clsx_default(className, iconClassName),
    children: icon
  }) : null;
};

// node_modules/react-tweet/dist/twitter-theme/tweet-header.js
var TweetHeader = ({ tweet, components }) => {
  var _components_AvatarImg;
  const Img = (_components_AvatarImg = components == null ? void 0 : components.AvatarImg) != null ? _components_AvatarImg : AvatarImg;
  const { user } = tweet;
  return (0, import_jsx_runtime7.jsxs)("div", {
    className: s6.header,
    children: [
      (0, import_jsx_runtime7.jsxs)("a", {
        href: tweet.url,
        className: s6.avatar,
        target: "_blank",
        rel: "noopener noreferrer",
        children: [
          (0, import_jsx_runtime7.jsx)("div", {
            className: clsx_default(s6.avatarOverflow, user.profile_image_shape === "Square" && s6.avatarSquare),
            children: (0, import_jsx_runtime7.jsx)(Img, {
              src: user.profile_image_url_https,
              alt: user.name,
              width: 48,
              height: 48
            })
          }),
          (0, import_jsx_runtime7.jsx)("div", {
            className: s6.avatarOverflow,
            children: (0, import_jsx_runtime7.jsx)("div", {
              className: s6.avatarShadow
            })
          })
        ]
      }),
      (0, import_jsx_runtime7.jsxs)("div", {
        className: s6.author,
        children: [
          (0, import_jsx_runtime7.jsxs)("a", {
            href: tweet.url,
            className: s6.authorLink,
            target: "_blank",
            rel: "noopener noreferrer",
            children: [
              (0, import_jsx_runtime7.jsx)("div", {
                className: s6.authorLinkText,
                children: (0, import_jsx_runtime7.jsx)("span", {
                  title: user.name,
                  children: user.name
                })
              }),
              (0, import_jsx_runtime7.jsx)(VerifiedBadge, {
                user,
                className: s6.authorVerified
              })
            ]
          }),
          (0, import_jsx_runtime7.jsxs)("div", {
            className: s6.authorMeta,
            children: [
              (0, import_jsx_runtime7.jsx)("a", {
                href: tweet.url,
                className: s6.username,
                target: "_blank",
                rel: "noopener noreferrer",
                children: (0, import_jsx_runtime7.jsxs)("span", {
                  title: `@${user.screen_name}`,
                  children: [
                    "@",
                    user.screen_name
                  ]
                })
              }),
              (0, import_jsx_runtime7.jsxs)("div", {
                className: s6.authorFollow,
                children: [
                  (0, import_jsx_runtime7.jsx)("span", {
                    className: s6.separator,
                    children: "·"
                  }),
                  (0, import_jsx_runtime7.jsx)("a", {
                    href: user.follow_url,
                    className: s6.follow,
                    target: "_blank",
                    rel: "noopener noreferrer",
                    children: "Follow"
                  })
                ]
              })
            ]
          })
        ]
      }),
      (0, import_jsx_runtime7.jsx)("a", {
        href: tweet.url,
        className: s6.brand,
        target: "_blank",
        rel: "noopener noreferrer",
        "aria-label": "View on Twitter",
        children: (0, import_jsx_runtime7.jsx)("svg", {
          viewBox: "0 0 24 24",
          "aria-hidden": "true",
          className: s6.twitterIcon,
          children: (0, import_jsx_runtime7.jsx)("g", {
            children: (0, import_jsx_runtime7.jsx)("path", {
              d: "M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z"
            })
          })
        })
      })
    ]
  });
};

// node_modules/react-tweet/dist/twitter-theme/tweet-in-reply-to.js
var import_jsx_runtime8 = __toESM(require_jsx_runtime(), 1);
import s7 from "C:/Users/Adam Adam/Desktop/shadow/node_modules/react-tweet/dist/twitter-theme/tweet-in-reply-to.module.css";
var TweetInReplyTo = ({ tweet }) => (0, import_jsx_runtime8.jsxs)("a", {
  href: tweet.in_reply_to_url,
  className: s7.root,
  target: "_blank",
  rel: "noopener noreferrer",
  children: [
    "Replying to @",
    tweet.in_reply_to_screen_name
  ]
});

// node_modules/react-tweet/dist/twitter-theme/tweet-body.js
var import_jsx_runtime10 = __toESM(require_jsx_runtime(), 1);

// node_modules/react-tweet/dist/twitter-theme/tweet-link.js
var import_jsx_runtime9 = __toESM(require_jsx_runtime(), 1);
import s8 from "C:/Users/Adam Adam/Desktop/shadow/node_modules/react-tweet/dist/twitter-theme/tweet-link.module.css";
var TweetLink = ({ href, children }) => (0, import_jsx_runtime9.jsx)("a", {
  href,
  className: s8.root,
  target: "_blank",
  rel: "noopener noreferrer nofollow",
  children
});

// node_modules/react-tweet/dist/twitter-theme/tweet-body.js
import s9 from "C:/Users/Adam Adam/Desktop/shadow/node_modules/react-tweet/dist/twitter-theme/tweet-body.module.css";
var TweetBody = ({ tweet }) => (0, import_jsx_runtime10.jsx)("p", {
  className: s9.root,
  children: tweet.entities.map((item, i) => {
    switch (item.type) {
      case "hashtag":
      case "mention":
      case "url":
      case "symbol":
        return (0, import_jsx_runtime10.jsx)(TweetLink, {
          href: item.href,
          children: item.text
        }, i);
      case "media":
        return;
      default:
        return (0, import_jsx_runtime10.jsx)("span", {
          dangerouslySetInnerHTML: {
            __html: item.text
          }
        }, i);
    }
  })
});

// node_modules/react-tweet/dist/twitter-theme/tweet-media.js
var import_jsx_runtime13 = __toESM(require_jsx_runtime(), 1);
var import_react2 = __toESM(require_react(), 1);

// node_modules/react-tweet/dist/utils.js
var getTweetUrl = (tweet) => `https://twitter.com/${tweet.user.screen_name}/status/${tweet.id_str}`;
var getUserUrl = (usernameOrTweet) => `https://twitter.com/${typeof usernameOrTweet === "string" ? usernameOrTweet : usernameOrTweet.user.screen_name}`;
var getLikeUrl = (tweet) => `https://twitter.com/intent/like?tweet_id=${tweet.id_str}`;
var getReplyUrl = (tweet) => `https://twitter.com/intent/tweet?in_reply_to=${tweet.id_str}`;
var getFollowUrl = (tweet) => `https://twitter.com/intent/follow?screen_name=${tweet.user.screen_name}`;
var getHashtagUrl = (hashtag) => `https://twitter.com/hashtag/${hashtag.text}`;
var getSymbolUrl = (symbol) => `https://twitter.com/search?q=%24${symbol.text}`;
var getInReplyToUrl = (tweet) => `https://twitter.com/${tweet.in_reply_to_screen_name}/status/${tweet.in_reply_to_status_id_str}`;
var getMediaUrl = (media, size) => {
  const url = new URL(media.media_url_https);
  const extension = url.pathname.split(".").pop();
  if (!extension)
    return media.media_url_https;
  url.pathname = url.pathname.replace(`.${extension}`, "");
  url.searchParams.set("format", extension);
  url.searchParams.set("name", size);
  return url.toString();
};
var getMp4Videos = (media) => {
  const { variants } = media.video_info;
  const sortedMp4Videos = variants.filter((vid) => vid.content_type === "video/mp4").sort((a, b) => {
    var _b_bitrate, _a_bitrate;
    return ((_b_bitrate = b.bitrate) != null ? _b_bitrate : 0) - ((_a_bitrate = a.bitrate) != null ? _a_bitrate : 0);
  });
  return sortedMp4Videos;
};
var getMp4Video = (media) => {
  const mp4Videos = getMp4Videos(media);
  return mp4Videos.length > 1 ? mp4Videos[1] : mp4Videos[0];
};
var formatNumber = (n) => {
  if (n > 999999)
    return `${(n / 1e6).toFixed(1)}M`;
  if (n > 999)
    return `${(n / 1e3).toFixed(1)}K`;
  return n.toString();
};
function getEntities(tweet) {
  const textMap = Array.from(tweet.text);
  const result = [
    {
      indices: tweet.display_text_range,
      type: "text"
    }
  ];
  addEntities(result, "hashtag", tweet.entities.hashtags);
  addEntities(result, "mention", tweet.entities.user_mentions);
  addEntities(result, "url", tweet.entities.urls);
  addEntities(result, "symbol", tweet.entities.symbols);
  if (tweet.entities.media) {
    addEntities(result, "media", tweet.entities.media);
  }
  fixRange(tweet, result);
  return result.map((entity) => {
    const text = textMap.slice(entity.indices[0], entity.indices[1]).join("");
    switch (entity.type) {
      case "hashtag":
        return Object.assign(entity, {
          href: getHashtagUrl(entity),
          text
        });
      case "mention":
        return Object.assign(entity, {
          href: getUserUrl(entity.screen_name),
          text
        });
      case "url":
      case "media":
        return Object.assign(entity, {
          href: entity.expanded_url,
          text: entity.display_url
        });
      case "symbol":
        return Object.assign(entity, {
          href: getSymbolUrl(entity),
          text
        });
      default:
        return Object.assign(entity, {
          text
        });
    }
  });
}
function addEntities(result, type, entities) {
  for (const entity of entities) {
    for (const [i, item] of result.entries()) {
      if (item.indices[0] > entity.indices[0] || item.indices[1] < entity.indices[1]) {
        continue;
      }
      const items = [
        {
          ...entity,
          type
        }
      ];
      if (item.indices[0] < entity.indices[0]) {
        items.unshift({
          indices: [
            item.indices[0],
            entity.indices[0]
          ],
          type: "text"
        });
      }
      if (item.indices[1] > entity.indices[1]) {
        items.push({
          indices: [
            entity.indices[1],
            item.indices[1]
          ],
          type: "text"
        });
      }
      result.splice(i, 1, ...items);
      break;
    }
  }
}
function fixRange(tweet, entities) {
  if (tweet.entities.media && tweet.entities.media[0].indices[0] < tweet.display_text_range[1]) {
    tweet.display_text_range[1] = tweet.entities.media[0].indices[0];
  }
  const lastEntity = entities.at(-1);
  if (lastEntity && lastEntity.indices[1] > tweet.display_text_range[1]) {
    lastEntity.indices[1] = tweet.display_text_range[1];
  }
}
var enrichTweet = (tweet) => ({
  ...tweet,
  url: getTweetUrl(tweet),
  user: {
    ...tweet.user,
    url: getUserUrl(tweet),
    follow_url: getFollowUrl(tweet)
  },
  like_url: getLikeUrl(tweet),
  reply_url: getReplyUrl(tweet),
  in_reply_to_url: tweet.in_reply_to_screen_name ? getInReplyToUrl(tweet) : void 0,
  entities: getEntities(tweet),
  quoted_tweet: tweet.quoted_tweet ? {
    ...tweet.quoted_tweet,
    url: getTweetUrl(tweet.quoted_tweet),
    entities: getEntities(tweet.quoted_tweet)
  } : void 0
});

// node_modules/react-tweet/dist/twitter-theme/tweet-media-video.js
var import_jsx_runtime11 = __toESM(require_jsx_runtime(), 1);
var import_react = __toESM(require_react(), 1);
import mediaStyles from "C:/Users/Adam Adam/Desktop/shadow/node_modules/react-tweet/dist/twitter-theme/tweet-media.module.css";
import s10 from "C:/Users/Adam Adam/Desktop/shadow/node_modules/react-tweet/dist/twitter-theme/tweet-media-video.module.css";
var TweetMediaVideo = ({ tweet, media }) => {
  const [playButton, setPlayButton] = (0, import_react.useState)(true);
  const [isPlaying, setIsPlaying] = (0, import_react.useState)(false);
  const [ended, setEnded] = (0, import_react.useState)(false);
  const mp4Video = getMp4Video(media);
  let timeout = 0;
  return (0, import_jsx_runtime11.jsxs)(import_jsx_runtime11.Fragment, {
    children: [
      (0, import_jsx_runtime11.jsx)("video", {
        className: mediaStyles.image,
        poster: getMediaUrl(media, "small"),
        controls: !playButton,
        muted: true,
        preload: "none",
        tabIndex: playButton ? -1 : 0,
        onPlay: () => {
          if (timeout)
            window.clearTimeout(timeout);
          if (!isPlaying)
            setIsPlaying(true);
          if (ended)
            setEnded(false);
        },
        onPause: () => {
          if (timeout)
            window.clearTimeout(timeout);
          timeout = window.setTimeout(() => {
            if (isPlaying)
              setIsPlaying(false);
            timeout = 0;
          }, 100);
        },
        onEnded: () => {
          setEnded(true);
        },
        children: (0, import_jsx_runtime11.jsx)("source", {
          src: mp4Video.url,
          type: mp4Video.content_type
        })
      }),
      playButton && (0, import_jsx_runtime11.jsx)("button", {
        type: "button",
        className: s10.videoButton,
        "aria-label": "View video on X",
        onClick: (e) => {
          const video = e.currentTarget.previousSibling;
          e.preventDefault();
          setPlayButton(false);
          setIsPlaying(true);
          video.play();
          video.focus();
        },
        children: (0, import_jsx_runtime11.jsx)("svg", {
          viewBox: "0 0 24 24",
          className: s10.videoButtonIcon,
          "aria-hidden": "true",
          children: (0, import_jsx_runtime11.jsx)("g", {
            children: (0, import_jsx_runtime11.jsx)("path", {
              d: "M21 12L4 2v20l17-10z"
            })
          })
        })
      }),
      !isPlaying && !ended && (0, import_jsx_runtime11.jsx)("div", {
        className: s10.watchOnTwitter,
        children: (0, import_jsx_runtime11.jsx)("a", {
          href: tweet.url,
          className: s10.anchor,
          target: "_blank",
          rel: "noopener noreferrer",
          children: playButton ? "Watch on X" : "Continue watching on X"
        })
      }),
      ended && (0, import_jsx_runtime11.jsx)("a", {
        href: tweet.url,
        className: clsx_default(s10.anchor, s10.viewReplies),
        target: "_blank",
        rel: "noopener noreferrer",
        children: "View replies"
      })
    ]
  });
};

// node_modules/react-tweet/dist/twitter-theme/media-img.js
var import_jsx_runtime12 = __toESM(require_jsx_runtime(), 1);
var MediaImg = (props) => (0, import_jsx_runtime12.jsx)("img", {
  ...props
});

// node_modules/react-tweet/dist/twitter-theme/tweet-media.js
import s11 from "C:/Users/Adam Adam/Desktop/shadow/node_modules/react-tweet/dist/twitter-theme/tweet-media.module.css";
var getSkeletonStyle = (media, itemCount) => {
  let paddingBottom = 56.25;
  if (itemCount === 1)
    paddingBottom = 100 / media.original_info.width * media.original_info.height;
  if (itemCount === 2)
    paddingBottom = paddingBottom * 2;
  return {
    width: media.type === "photo" ? void 0 : "unset",
    paddingBottom: `${paddingBottom}%`
  };
};
var TweetMedia = ({ tweet, components, quoted }) => {
  var _tweet_mediaDetails, _tweet_mediaDetails1;
  var _tweet_mediaDetails_length;
  const length = (_tweet_mediaDetails_length = (_tweet_mediaDetails = tweet.mediaDetails) == null ? void 0 : _tweet_mediaDetails.length) != null ? _tweet_mediaDetails_length : 0;
  var _components_MediaImg;
  const Img = (_components_MediaImg = components == null ? void 0 : components.MediaImg) != null ? _components_MediaImg : MediaImg;
  return (0, import_jsx_runtime13.jsx)("div", {
    className: clsx_default(s11.root, !quoted && s11.rounded),
    children: (0, import_jsx_runtime13.jsx)("div", {
      className: clsx_default(s11.mediaWrapper, length > 1 && s11.grid2Columns, length === 3 && s11.grid3, length > 4 && s11.grid2x2),
      children: (_tweet_mediaDetails1 = tweet.mediaDetails) == null ? void 0 : _tweet_mediaDetails1.map((media) => (0, import_jsx_runtime13.jsx)(import_react2.Fragment, {
        children: media.type === "photo" ? (0, import_jsx_runtime13.jsxs)("a", {
          href: tweet.url,
          className: clsx_default(s11.mediaContainer, s11.mediaLink),
          target: "_blank",
          rel: "noopener noreferrer",
          children: [
            (0, import_jsx_runtime13.jsx)("div", {
              className: s11.skeleton,
              style: getSkeletonStyle(media, length)
            }),
            (0, import_jsx_runtime13.jsx)(Img, {
              src: getMediaUrl(media, "small"),
              alt: media.ext_alt_text || "Image",
              className: s11.image,
              draggable: true
            })
          ]
        }, media.media_url_https) : (0, import_jsx_runtime13.jsxs)("div", {
          className: s11.mediaContainer,
          children: [
            (0, import_jsx_runtime13.jsx)("div", {
              className: s11.skeleton,
              style: getSkeletonStyle(media, length)
            }),
            (0, import_jsx_runtime13.jsx)(TweetMediaVideo, {
              tweet,
              media
            })
          ]
        }, media.media_url_https)
      }, media.media_url_https))
    })
  });
};

// node_modules/react-tweet/dist/twitter-theme/tweet-info.js
var import_jsx_runtime15 = __toESM(require_jsx_runtime(), 1);

// node_modules/react-tweet/dist/twitter-theme/tweet-info-created-at.js
var import_jsx_runtime14 = __toESM(require_jsx_runtime(), 1);

// node_modules/react-tweet/dist/date-utils.js
var options = {
  hour: "numeric",
  minute: "2-digit",
  hour12: true,
  weekday: "short",
  month: "short",
  day: "numeric",
  year: "numeric"
};
var formatter = new Intl.DateTimeFormat("en-US", options);
var partsArrayToObject = (parts) => {
  const result = {};
  for (const part of parts) {
    result[part.type] = part.value;
  }
  return result;
};
var formatDate = (date) => {
  const parts = partsArrayToObject(formatter.formatToParts(date));
  const formattedTime = `${parts.hour}:${parts.minute} ${parts.dayPeriod}`;
  const formattedDate = `${parts.month} ${parts.day}, ${parts.year}`;
  return `${formattedTime} · ${formattedDate}`;
};

// node_modules/react-tweet/dist/twitter-theme/tweet-info-created-at.js
import s12 from "C:/Users/Adam Adam/Desktop/shadow/node_modules/react-tweet/dist/twitter-theme/tweet-info-created-at.module.css";
var TweetInfoCreatedAt = ({ tweet }) => {
  const createdAt = new Date(tweet.created_at);
  const formattedCreatedAtDate = formatDate(createdAt);
  return (0, import_jsx_runtime14.jsx)("a", {
    className: s12.root,
    href: tweet.url,
    target: "_blank",
    rel: "noopener noreferrer",
    "aria-label": formattedCreatedAtDate,
    children: (0, import_jsx_runtime14.jsx)("time", {
      dateTime: createdAt.toISOString(),
      children: formattedCreatedAtDate
    })
  });
};

// node_modules/react-tweet/dist/twitter-theme/tweet-info.js
import s13 from "C:/Users/Adam Adam/Desktop/shadow/node_modules/react-tweet/dist/twitter-theme/tweet-info.module.css";
var TweetInfo = ({ tweet }) => (0, import_jsx_runtime15.jsxs)("div", {
  className: s13.info,
  children: [
    (0, import_jsx_runtime15.jsx)(TweetInfoCreatedAt, {
      tweet
    }),
    (0, import_jsx_runtime15.jsx)("a", {
      className: s13.infoLink,
      href: "https://help.twitter.com/en/twitter-for-websites-ads-info-and-privacy",
      target: "_blank",
      rel: "noopener noreferrer",
      "aria-label": "Twitter for Websites, Ads Information and Privacy",
      children: (0, import_jsx_runtime15.jsx)("svg", {
        viewBox: "0 0 24 24",
        "aria-hidden": "true",
        className: s13.infoIcon,
        children: (0, import_jsx_runtime15.jsx)("g", {
          children: (0, import_jsx_runtime15.jsx)("path", {
            d: "M13.5 8.5c0 .83-.67 1.5-1.5 1.5s-1.5-.67-1.5-1.5S11.17 7 12 7s1.5.67 1.5 1.5zM13 17v-5h-2v5h2zm-1 5.25c5.66 0 10.25-4.59 10.25-10.25S17.66 1.75 12 1.75 1.75 6.34 1.75 12 6.34 22.25 12 22.25zM20.25 12c0 4.56-3.69 8.25-8.25 8.25S3.75 16.56 3.75 12 7.44 3.75 12 3.75s8.25 3.69 8.25 8.25z"
          })
        })
      })
    })
  ]
});

// node_modules/react-tweet/dist/twitter-theme/tweet-actions.js
var import_jsx_runtime17 = __toESM(require_jsx_runtime(), 1);

// node_modules/react-tweet/dist/twitter-theme/tweet-actions-copy.js
var import_jsx_runtime16 = __toESM(require_jsx_runtime(), 1);
var import_react3 = __toESM(require_react(), 1);
import s14 from "C:/Users/Adam Adam/Desktop/shadow/node_modules/react-tweet/dist/twitter-theme/tweet-actions.module.css";
var TweetActionsCopy = ({ tweet }) => {
  const [copied, setCopied] = (0, import_react3.useState)(false);
  const [copyAllText, setCopyAltText] = (0, import_react3.useState)(false);
  const handleCopy = () => {
    navigator.clipboard.writeText(tweet.url);
    setCopied(true);
  };
  (0, import_react3.useEffect)(() => {
    if (copied) {
      const timeout = setTimeout(() => {
        setCopied(false);
        setCopyAltText(true);
      }, 6e3);
      return () => clearTimeout(timeout);
    }
  }, [
    copied
  ]);
  return (0, import_jsx_runtime16.jsxs)("button", {
    type: "button",
    className: s14.copy,
    "aria-label": "Copy link",
    onClick: handleCopy,
    children: [
      (0, import_jsx_runtime16.jsx)("div", {
        className: s14.copyIconWrapper,
        children: copied ? (0, import_jsx_runtime16.jsx)("svg", {
          viewBox: "0 0 24 24",
          className: s14.copyIcon,
          "aria-hidden": "true",
          children: (0, import_jsx_runtime16.jsx)("g", {
            children: (0, import_jsx_runtime16.jsx)("path", {
              d: "M9.64 18.952l-5.55-4.861 1.317-1.504 3.951 3.459 8.459-10.948L19.4 6.32 9.64 18.952z"
            })
          })
        }) : (0, import_jsx_runtime16.jsx)("svg", {
          viewBox: "0 0 24 24",
          className: s14.copyIcon,
          "aria-hidden": "true",
          children: (0, import_jsx_runtime16.jsx)("g", {
            children: (0, import_jsx_runtime16.jsx)("path", {
              d: "M18.36 5.64c-1.95-1.96-5.11-1.96-7.07 0L9.88 7.05 8.46 5.64l1.42-1.42c2.73-2.73 7.16-2.73 9.9 0 2.73 2.74 2.73 7.17 0 9.9l-1.42 1.42-1.41-1.42 1.41-1.41c1.96-1.96 1.96-5.12 0-7.07zm-2.12 3.53l-7.07 7.07-1.41-1.41 7.07-7.07 1.41 1.41zm-12.02.71l1.42-1.42 1.41 1.42-1.41 1.41c-1.96 1.96-1.96 5.12 0 7.07 1.95 1.96 5.11 1.96 7.07 0l1.41-1.41 1.42 1.41-1.42 1.42c-2.73 2.73-7.16 2.73-9.9 0-2.73-2.74-2.73-7.17 0-9.9z"
            })
          })
        })
      }),
      (0, import_jsx_runtime16.jsx)("span", {
        className: s14.copyText,
        children: copied ? "Copied!" : copyAllText ? "Copy link to Tweet" : "Copy link"
      })
    ]
  });
};

// node_modules/react-tweet/dist/twitter-theme/tweet-actions.js
import s15 from "C:/Users/Adam Adam/Desktop/shadow/node_modules/react-tweet/dist/twitter-theme/tweet-actions.module.css";
var TweetActions = ({ tweet }) => {
  const favoriteCount = formatNumber(tweet.favorite_count);
  return (0, import_jsx_runtime17.jsxs)("div", {
    className: s15.actions,
    children: [
      (0, import_jsx_runtime17.jsxs)("a", {
        className: s15.like,
        href: tweet.like_url,
        target: "_blank",
        rel: "noopener noreferrer",
        "aria-label": `Like. This Tweet has ${favoriteCount} likes`,
        children: [
          (0, import_jsx_runtime17.jsx)("div", {
            className: s15.likeIconWrapper,
            children: (0, import_jsx_runtime17.jsx)("svg", {
              viewBox: "0 0 24 24",
              className: s15.likeIcon,
              "aria-hidden": "true",
              children: (0, import_jsx_runtime17.jsx)("g", {
                children: (0, import_jsx_runtime17.jsx)("path", {
                  d: "M20.884 13.19c-1.351 2.48-4.001 5.12-8.379 7.67l-.503.3-.504-.3c-4.379-2.55-7.029-5.19-8.382-7.67-1.36-2.5-1.41-4.86-.514-6.67.887-1.79 2.647-2.91 4.601-3.01 1.651-.09 3.368.56 4.798 2.01 1.429-1.45 3.146-2.1 4.796-2.01 1.954.1 3.714 1.22 4.601 3.01.896 1.81.846 4.17-.514 6.67z"
                })
              })
            })
          }),
          (0, import_jsx_runtime17.jsx)("span", {
            className: s15.likeCount,
            children: favoriteCount
          })
        ]
      }),
      (0, import_jsx_runtime17.jsxs)("a", {
        className: s15.reply,
        href: tweet.reply_url,
        target: "_blank",
        rel: "noopener noreferrer",
        "aria-label": "Reply to this Tweet on Twitter",
        children: [
          (0, import_jsx_runtime17.jsx)("div", {
            className: s15.replyIconWrapper,
            children: (0, import_jsx_runtime17.jsx)("svg", {
              viewBox: "0 0 24 24",
              className: s15.replyIcon,
              "aria-hidden": "true",
              children: (0, import_jsx_runtime17.jsx)("g", {
                children: (0, import_jsx_runtime17.jsx)("path", {
                  d: "M1.751 10c0-4.42 3.584-8 8.005-8h4.366c4.49 0 8.129 3.64 8.129 8.13 0 2.96-1.607 5.68-4.196 7.11l-8.054 4.46v-3.69h-.067c-4.49.1-8.183-3.51-8.183-8.01z"
                })
              })
            })
          }),
          (0, import_jsx_runtime17.jsx)("span", {
            className: s15.replyText,
            children: "Reply"
          })
        ]
      }),
      (0, import_jsx_runtime17.jsx)(TweetActionsCopy, {
        tweet
      })
    ]
  });
};

// node_modules/react-tweet/dist/twitter-theme/tweet-replies.js
var import_jsx_runtime18 = __toESM(require_jsx_runtime(), 1);
import s16 from "C:/Users/Adam Adam/Desktop/shadow/node_modules/react-tweet/dist/twitter-theme/tweet-replies.module.css";
var TweetReplies = ({ tweet }) => (0, import_jsx_runtime18.jsx)("div", {
  className: s16.replies,
  children: (0, import_jsx_runtime18.jsx)("a", {
    className: s16.link,
    href: tweet.url,
    target: "_blank",
    rel: "noopener noreferrer",
    children: (0, import_jsx_runtime18.jsx)("span", {
      className: s16.text,
      children: tweet.conversation_count === 0 ? "Read more on X" : tweet.conversation_count === 1 ? `Read ${formatNumber(tweet.conversation_count)} reply` : `Read ${formatNumber(tweet.conversation_count)} replies`
    })
  })
});

// node_modules/react-tweet/dist/twitter-theme/quoted-tweet/quoted-tweet.js
var import_jsx_runtime22 = __toESM(require_jsx_runtime(), 1);

// node_modules/react-tweet/dist/twitter-theme/quoted-tweet/quoted-tweet-container.js
var import_jsx_runtime19 = __toESM(require_jsx_runtime(), 1);
import s17 from "C:/Users/Adam Adam/Desktop/shadow/node_modules/react-tweet/dist/twitter-theme/quoted-tweet/quoted-tweet-container.module.css";
var QuotedTweetContainer = ({ tweet, children }) => (0, import_jsx_runtime19.jsx)("div", {
  className: s17.root,
  onClick: (e) => {
    e.preventDefault();
    window.open(tweet.url, "_blank");
  },
  children: (0, import_jsx_runtime19.jsx)("article", {
    className: s17.article,
    children
  })
});

// node_modules/react-tweet/dist/twitter-theme/quoted-tweet/quoted-tweet-header.js
var import_jsx_runtime20 = __toESM(require_jsx_runtime(), 1);
import s18 from "C:/Users/Adam Adam/Desktop/shadow/node_modules/react-tweet/dist/twitter-theme/quoted-tweet/quoted-tweet-header.module.css";
var QuotedTweetHeader = ({ tweet }) => {
  const { user } = tweet;
  return (0, import_jsx_runtime20.jsxs)("div", {
    className: s18.header,
    children: [
      (0, import_jsx_runtime20.jsx)("a", {
        href: tweet.url,
        className: s18.avatar,
        target: "_blank",
        rel: "noopener noreferrer",
        children: (0, import_jsx_runtime20.jsx)("div", {
          className: clsx_default(s18.avatarOverflow, user.profile_image_shape === "Square" && s18.avatarSquare),
          children: (0, import_jsx_runtime20.jsx)(AvatarImg, {
            src: user.profile_image_url_https,
            alt: user.name,
            width: 20,
            height: 20
          })
        })
      }),
      (0, import_jsx_runtime20.jsxs)("div", {
        className: s18.author,
        children: [
          (0, import_jsx_runtime20.jsx)("div", {
            className: s18.authorText,
            children: (0, import_jsx_runtime20.jsx)("span", {
              title: user.name,
              children: user.name
            })
          }),
          (0, import_jsx_runtime20.jsx)(VerifiedBadge, {
            user
          }),
          (0, import_jsx_runtime20.jsx)("div", {
            className: s18.username,
            children: (0, import_jsx_runtime20.jsxs)("span", {
              title: `@${user.screen_name}`,
              children: [
                "@",
                user.screen_name
              ]
            })
          })
        ]
      })
    ]
  });
};

// node_modules/react-tweet/dist/twitter-theme/quoted-tweet/quoted-tweet-body.js
var import_jsx_runtime21 = __toESM(require_jsx_runtime(), 1);
import s19 from "C:/Users/Adam Adam/Desktop/shadow/node_modules/react-tweet/dist/twitter-theme/quoted-tweet/quoted-tweet-body.module.css";
var QuotedTweetBody = ({ tweet }) => (0, import_jsx_runtime21.jsx)("p", {
  className: s19.root,
  children: tweet.entities.map((item, i) => (0, import_jsx_runtime21.jsx)("span", {
    dangerouslySetInnerHTML: {
      __html: item.text
    }
  }, i))
});

// node_modules/react-tweet/dist/twitter-theme/quoted-tweet/quoted-tweet.js
var QuotedTweet = ({ tweet }) => {
  var _tweet_mediaDetails;
  return (0, import_jsx_runtime22.jsxs)(QuotedTweetContainer, {
    tweet,
    children: [
      (0, import_jsx_runtime22.jsx)(QuotedTweetHeader, {
        tweet
      }),
      (0, import_jsx_runtime22.jsx)(QuotedTweetBody, {
        tweet
      }),
      ((_tweet_mediaDetails = tweet.mediaDetails) == null ? void 0 : _tweet_mediaDetails.length) ? (0, import_jsx_runtime22.jsx)(TweetMedia, {
        quoted: true,
        tweet
      }) : null
    ]
  });
};

// node_modules/react-tweet/dist/twitter-theme/embedded-tweet.js
var import_react4 = __toESM(require_react(), 1);
var EmbeddedTweet = ({ tweet: t, components }) => {
  var _tweet_mediaDetails;
  const tweet = (0, import_react4.useMemo)(() => enrichTweet(t), [
    t
  ]);
  return (0, import_jsx_runtime23.jsxs)(TweetContainer, {
    children: [
      (0, import_jsx_runtime23.jsx)(TweetHeader, {
        tweet,
        components
      }),
      tweet.in_reply_to_status_id_str && (0, import_jsx_runtime23.jsx)(TweetInReplyTo, {
        tweet
      }),
      (0, import_jsx_runtime23.jsx)(TweetBody, {
        tweet
      }),
      ((_tweet_mediaDetails = tweet.mediaDetails) == null ? void 0 : _tweet_mediaDetails.length) ? (0, import_jsx_runtime23.jsx)(TweetMedia, {
        tweet,
        components
      }) : null,
      tweet.quoted_tweet && (0, import_jsx_runtime23.jsx)(QuotedTweet, {
        tweet: tweet.quoted_tweet
      }),
      (0, import_jsx_runtime23.jsx)(TweetInfo, {
        tweet
      }),
      (0, import_jsx_runtime23.jsx)(TweetActions, {
        tweet
      }),
      (0, import_jsx_runtime23.jsx)(TweetReplies, {
        tweet
      })
    ]
  });
};

// node_modules/react-tweet/dist/twitter-theme/tweet-not-found.js
var import_jsx_runtime24 = __toESM(require_jsx_runtime(), 1);
import styles from "C:/Users/Adam Adam/Desktop/shadow/node_modules/react-tweet/dist/twitter-theme/tweet-not-found.module.css";
var TweetNotFound = (_props) => (0, import_jsx_runtime24.jsx)(TweetContainer, {
  children: (0, import_jsx_runtime24.jsxs)("div", {
    className: styles.root,
    children: [
      (0, import_jsx_runtime24.jsx)("h3", {
        children: "Tweet not found"
      }),
      (0, import_jsx_runtime24.jsx)("p", {
        children: "The embedded tweet could not be found…"
      })
    ]
  })
});

// node_modules/react-tweet/dist/twitter-theme/tweet-skeleton.js
var import_jsx_runtime26 = __toESM(require_jsx_runtime(), 1);

// node_modules/react-tweet/dist/twitter-theme/skeleton.js
var import_jsx_runtime25 = __toESM(require_jsx_runtime(), 1);
import styles2 from "C:/Users/Adam Adam/Desktop/shadow/node_modules/react-tweet/dist/twitter-theme/skeleton.module.css";
var Skeleton = ({ style }) => (0, import_jsx_runtime25.jsx)("span", {
  className: styles2.skeleton,
  style
});

// node_modules/react-tweet/dist/twitter-theme/tweet-skeleton.js
import styles3 from "C:/Users/Adam Adam/Desktop/shadow/node_modules/react-tweet/dist/twitter-theme/tweet-skeleton.module.css";
var TweetSkeleton = () => (0, import_jsx_runtime26.jsxs)(TweetContainer, {
  className: styles3.root,
  children: [
    (0, import_jsx_runtime26.jsx)(Skeleton, {
      style: {
        height: "3rem",
        marginBottom: "0.75rem"
      }
    }),
    (0, import_jsx_runtime26.jsx)(Skeleton, {
      style: {
        height: "6rem",
        margin: "0.5rem 0"
      }
    }),
    (0, import_jsx_runtime26.jsx)("div", {
      style: {
        borderTop: "var(--tweet-border)",
        margin: "0.5rem 0"
      }
    }),
    (0, import_jsx_runtime26.jsx)(Skeleton, {
      style: {
        height: "2rem"
      }
    }),
    (0, import_jsx_runtime26.jsx)(Skeleton, {
      style: {
        height: "2rem",
        borderRadius: "9999px",
        marginTop: "0.5rem"
      }
    })
  ]
});

// node_modules/react-tweet/dist/swr.js
var import_jsx_runtime27 = __toESM(require_jsx_runtime(), 1);

// node_modules/react-tweet/dist/hooks.js
var import_react7 = __toESM(require_react(), 1);

// node_modules/swr/dist/core/index.mjs
var import_react6 = __toESM(require_react(), 1);
var import_shim = __toESM(require_shim(), 1);

// node_modules/swr/dist/_internal/index.mjs
var import_react5 = __toESM(require_react(), 1);
var noop = () => {
};
var UNDEFINED = (
  /*#__NOINLINE__*/
  noop()
);
var OBJECT = Object;
var isUndefined = (v) => v === UNDEFINED;
var isFunction = (v) => typeof v == "function";
var mergeObjects = (a, b) => ({
  ...a,
  ...b
});
var isPromiseLike = (x) => isFunction(x.then);
var table = /* @__PURE__ */ new WeakMap();
var counter = 0;
var stableHash = (arg) => {
  const type = typeof arg;
  const constructor = arg && arg.constructor;
  const isDate = constructor == Date;
  let result;
  let index;
  if (OBJECT(arg) === arg && !isDate && constructor != RegExp) {
    result = table.get(arg);
    if (result)
      return result;
    result = ++counter + "~";
    table.set(arg, result);
    if (constructor == Array) {
      result = "@";
      for (index = 0; index < arg.length; index++) {
        result += stableHash(arg[index]) + ",";
      }
      table.set(arg, result);
    }
    if (constructor == OBJECT) {
      result = "#";
      const keys = OBJECT.keys(arg).sort();
      while (!isUndefined(index = keys.pop())) {
        if (!isUndefined(arg[index])) {
          result += index + ":" + stableHash(arg[index]) + ",";
        }
      }
      table.set(arg, result);
    }
  } else {
    result = isDate ? arg.toJSON() : type == "symbol" ? arg.toString() : type == "string" ? JSON.stringify(arg) : "" + arg;
  }
  return result;
};
var SWRGlobalState = /* @__PURE__ */ new WeakMap();
var EMPTY_CACHE = {};
var INITIAL_CACHE = {};
var STR_UNDEFINED = "undefined";
var isWindowDefined = typeof window != STR_UNDEFINED;
var isDocumentDefined = typeof document != STR_UNDEFINED;
var hasRequestAnimationFrame = () => isWindowDefined && typeof window["requestAnimationFrame"] != STR_UNDEFINED;
var createCacheHelper = (cache2, key) => {
  const state = SWRGlobalState.get(cache2);
  return [
    // Getter
    () => !isUndefined(key) && cache2.get(key) || EMPTY_CACHE,
    // Setter
    (info) => {
      if (!isUndefined(key)) {
        const prev = cache2.get(key);
        if (!(key in INITIAL_CACHE)) {
          INITIAL_CACHE[key] = prev;
        }
        state[5](key, mergeObjects(prev, info), prev || EMPTY_CACHE);
      }
    },
    // Subscriber
    state[6],
    // Get server cache snapshot
    () => {
      if (!isUndefined(key)) {
        if (key in INITIAL_CACHE)
          return INITIAL_CACHE[key];
      }
      return !isUndefined(key) && cache2.get(key) || EMPTY_CACHE;
    }
  ];
};
var online = true;
var isOnline = () => online;
var [onWindowEvent, offWindowEvent] = isWindowDefined && window.addEventListener ? [
  window.addEventListener.bind(window),
  window.removeEventListener.bind(window)
] : [
  noop,
  noop
];
var isVisible = () => {
  const visibilityState = isDocumentDefined && document.visibilityState;
  return isUndefined(visibilityState) || visibilityState !== "hidden";
};
var initFocus = (callback) => {
  if (isDocumentDefined) {
    document.addEventListener("visibilitychange", callback);
  }
  onWindowEvent("focus", callback);
  return () => {
    if (isDocumentDefined) {
      document.removeEventListener("visibilitychange", callback);
    }
    offWindowEvent("focus", callback);
  };
};
var initReconnect = (callback) => {
  const onOnline = () => {
    online = true;
    callback();
  };
  const onOffline = () => {
    online = false;
  };
  onWindowEvent("online", onOnline);
  onWindowEvent("offline", onOffline);
  return () => {
    offWindowEvent("online", onOnline);
    offWindowEvent("offline", onOffline);
  };
};
var preset = {
  isOnline,
  isVisible
};
var defaultConfigOptions = {
  initFocus,
  initReconnect
};
var IS_REACT_LEGACY = !import_react5.default.useId;
var IS_SERVER = !isWindowDefined || "Deno" in window;
var rAF = (f) => hasRequestAnimationFrame() ? window["requestAnimationFrame"](f) : setTimeout(f, 1);
var useIsomorphicLayoutEffect = IS_SERVER ? import_react5.useEffect : import_react5.useLayoutEffect;
var navigatorConnection = typeof navigator !== "undefined" && navigator.connection;
var slowConnection = !IS_SERVER && navigatorConnection && ([
  "slow-2g",
  "2g"
].includes(navigatorConnection.effectiveType) || navigatorConnection.saveData);
var serialize = (key) => {
  if (isFunction(key)) {
    try {
      key = key();
    } catch (err) {
      key = "";
    }
  }
  const args = key;
  key = typeof key == "string" ? key : (Array.isArray(key) ? key.length : key) ? stableHash(key) : "";
  return [
    key,
    args
  ];
};
var __timestamp = 0;
var getTimestamp = () => ++__timestamp;
var FOCUS_EVENT = 0;
var RECONNECT_EVENT = 1;
var MUTATE_EVENT = 2;
var ERROR_REVALIDATE_EVENT = 3;
var events = {
  __proto__: null,
  ERROR_REVALIDATE_EVENT,
  FOCUS_EVENT,
  MUTATE_EVENT,
  RECONNECT_EVENT
};
async function internalMutate(...args) {
  const [cache2, _key, _data, _opts] = args;
  const options2 = mergeObjects({
    populateCache: true,
    throwOnError: true
  }, typeof _opts === "boolean" ? {
    revalidate: _opts
  } : _opts || {});
  let populateCache = options2.populateCache;
  const rollbackOnErrorOption = options2.rollbackOnError;
  let optimisticData = options2.optimisticData;
  const rollbackOnError = (error) => {
    return typeof rollbackOnErrorOption === "function" ? rollbackOnErrorOption(error) : rollbackOnErrorOption !== false;
  };
  const throwOnError = options2.throwOnError;
  if (isFunction(_key)) {
    const keyFilter = _key;
    const matchedKeys = [];
    const it = cache2.keys();
    for (const key of it) {
      if (
        // Skip the special useSWRInfinite and useSWRSubscription keys.
        !/^\$(inf|sub)\$/.test(key) && keyFilter(cache2.get(key)._k)
      ) {
        matchedKeys.push(key);
      }
    }
    return Promise.all(matchedKeys.map(mutateByKey));
  }
  return mutateByKey(_key);
  async function mutateByKey(_k) {
    const [key] = serialize(_k);
    if (!key)
      return;
    const [get, set] = createCacheHelper(cache2, key);
    const [EVENT_REVALIDATORS, MUTATION, FETCH, PRELOAD] = SWRGlobalState.get(cache2);
    const startRevalidate = () => {
      const revalidators = EVENT_REVALIDATORS[key];
      const revalidate = isFunction(options2.revalidate) ? options2.revalidate(get().data, _k) : options2.revalidate !== false;
      if (revalidate) {
        delete FETCH[key];
        delete PRELOAD[key];
        if (revalidators && revalidators[0]) {
          return revalidators[0](MUTATE_EVENT).then(() => get().data);
        }
      }
      return get().data;
    };
    if (args.length < 3) {
      return startRevalidate();
    }
    let data = _data;
    let error;
    const beforeMutationTs = getTimestamp();
    MUTATION[key] = [
      beforeMutationTs,
      0
    ];
    const hasOptimisticData = !isUndefined(optimisticData);
    const state = get();
    const displayedData = state.data;
    const currentData = state._c;
    const committedData = isUndefined(currentData) ? displayedData : currentData;
    if (hasOptimisticData) {
      optimisticData = isFunction(optimisticData) ? optimisticData(committedData, displayedData) : optimisticData;
      set({
        data: optimisticData,
        _c: committedData
      });
    }
    if (isFunction(data)) {
      try {
        data = data(committedData);
      } catch (err) {
        error = err;
      }
    }
    if (data && isPromiseLike(data)) {
      data = await data.catch((err) => {
        error = err;
      });
      if (beforeMutationTs !== MUTATION[key][0]) {
        if (error)
          throw error;
        return data;
      } else if (error && hasOptimisticData && rollbackOnError(error)) {
        populateCache = true;
        set({
          data: committedData,
          _c: UNDEFINED
        });
      }
    }
    if (populateCache) {
      if (!error) {
        if (isFunction(populateCache)) {
          const populateCachedData = populateCache(data, committedData);
          set({
            data: populateCachedData,
            error: UNDEFINED,
            _c: UNDEFINED
          });
        } else {
          set({
            data,
            error: UNDEFINED,
            _c: UNDEFINED
          });
        }
      }
    }
    MUTATION[key][1] = getTimestamp();
    Promise.resolve(startRevalidate()).then(() => {
      set({
        _c: UNDEFINED
      });
    });
    if (error) {
      if (throwOnError)
        throw error;
      return;
    }
    return data;
  }
}
var revalidateAllKeys = (revalidators, type) => {
  for (const key in revalidators) {
    if (revalidators[key][0])
      revalidators[key][0](type);
  }
};
var initCache = (provider, options2) => {
  if (!SWRGlobalState.has(provider)) {
    const opts = mergeObjects(defaultConfigOptions, options2);
    const EVENT_REVALIDATORS = {};
    const mutate2 = internalMutate.bind(UNDEFINED, provider);
    let unmount = noop;
    const subscriptions = {};
    const subscribe = (key, callback) => {
      const subs = subscriptions[key] || [];
      subscriptions[key] = subs;
      subs.push(callback);
      return () => subs.splice(subs.indexOf(callback), 1);
    };
    const setter = (key, value, prev) => {
      provider.set(key, value);
      const subs = subscriptions[key];
      if (subs) {
        for (const fn of subs) {
          fn(value, prev);
        }
      }
    };
    const initProvider = () => {
      if (!SWRGlobalState.has(provider)) {
        SWRGlobalState.set(provider, [
          EVENT_REVALIDATORS,
          {},
          {},
          {},
          mutate2,
          setter,
          subscribe
        ]);
        if (!IS_SERVER) {
          const releaseFocus = opts.initFocus(setTimeout.bind(UNDEFINED, revalidateAllKeys.bind(UNDEFINED, EVENT_REVALIDATORS, FOCUS_EVENT)));
          const releaseReconnect = opts.initReconnect(setTimeout.bind(UNDEFINED, revalidateAllKeys.bind(UNDEFINED, EVENT_REVALIDATORS, RECONNECT_EVENT)));
          unmount = () => {
            releaseFocus && releaseFocus();
            releaseReconnect && releaseReconnect();
            SWRGlobalState.delete(provider);
          };
        }
      }
    };
    initProvider();
    return [
      provider,
      mutate2,
      initProvider,
      unmount
    ];
  }
  return [
    provider,
    SWRGlobalState.get(provider)[4]
  ];
};
var onErrorRetry = (_, __, config, revalidate, opts) => {
  const maxRetryCount = config.errorRetryCount;
  const currentRetryCount = opts.retryCount;
  const timeout = ~~((Math.random() + 0.5) * (1 << (currentRetryCount < 8 ? currentRetryCount : 8))) * config.errorRetryInterval;
  if (!isUndefined(maxRetryCount) && currentRetryCount > maxRetryCount) {
    return;
  }
  setTimeout(revalidate, timeout, opts);
};
var compare = (currentData, newData) => stableHash(currentData) == stableHash(newData);
var [cache, mutate] = initCache(/* @__PURE__ */ new Map());
var defaultConfig = mergeObjects(
  {
    // events
    onLoadingSlow: noop,
    onSuccess: noop,
    onError: noop,
    onErrorRetry,
    onDiscarded: noop,
    // switches
    revalidateOnFocus: true,
    revalidateOnReconnect: true,
    revalidateIfStale: true,
    shouldRetryOnError: true,
    // timeouts
    errorRetryInterval: slowConnection ? 1e4 : 5e3,
    focusThrottleInterval: 5 * 1e3,
    dedupingInterval: 2 * 1e3,
    loadingTimeout: slowConnection ? 5e3 : 3e3,
    // providers
    compare,
    isPaused: () => false,
    cache,
    mutate,
    fallback: {}
  },
  // use web preset by default
  preset
);
var mergeConfigs = (a, b) => {
  const v = mergeObjects(a, b);
  if (b) {
    const { use: u1, fallback: f1 } = a;
    const { use: u2, fallback: f2 } = b;
    if (u1 && u2) {
      v.use = u1.concat(u2);
    }
    if (f1 && f2) {
      v.fallback = mergeObjects(f1, f2);
    }
  }
  return v;
};
var SWRConfigContext = (0, import_react5.createContext)({});
var SWRConfig = (props) => {
  const { value } = props;
  const parentConfig = (0, import_react5.useContext)(SWRConfigContext);
  const isFunctionalConfig = isFunction(value);
  const config = (0, import_react5.useMemo)(() => isFunctionalConfig ? value(parentConfig) : value, [
    isFunctionalConfig,
    parentConfig,
    value
  ]);
  const extendedConfig = (0, import_react5.useMemo)(() => isFunctionalConfig ? config : mergeConfigs(parentConfig, config), [
    isFunctionalConfig,
    parentConfig,
    config
  ]);
  const provider = config && config.provider;
  const cacheContextRef = (0, import_react5.useRef)(UNDEFINED);
  if (provider && !cacheContextRef.current) {
    cacheContextRef.current = initCache(provider(extendedConfig.cache || cache), config);
  }
  const cacheContext = cacheContextRef.current;
  if (cacheContext) {
    extendedConfig.cache = cacheContext[0];
    extendedConfig.mutate = cacheContext[1];
  }
  useIsomorphicLayoutEffect(() => {
    if (cacheContext) {
      cacheContext[2] && cacheContext[2]();
      return cacheContext[3];
    }
  }, []);
  return (0, import_react5.createElement)(SWRConfigContext.Provider, mergeObjects(props, {
    value: extendedConfig
  }));
};
var INFINITE_PREFIX = "$inf$";
var enableDevtools = isWindowDefined && window.__SWR_DEVTOOLS_USE__;
var use = enableDevtools ? window.__SWR_DEVTOOLS_USE__ : [];
var setupDevTools = () => {
  if (enableDevtools) {
    window.__SWR_DEVTOOLS_REACT__ = import_react5.default;
  }
};
var normalize = (args) => {
  return isFunction(args[1]) ? [
    args[0],
    args[1],
    args[2] || {}
  ] : [
    args[0],
    null,
    (args[1] === null ? args[2] : args[1]) || {}
  ];
};
var useSWRConfig = () => {
  return mergeObjects(defaultConfig, (0, import_react5.useContext)(SWRConfigContext));
};
var middleware = (useSWRNext) => (key_, fetcher_, config) => {
  const fetcher2 = fetcher_ && ((...args) => {
    const [key] = serialize(key_);
    const [, , , PRELOAD] = SWRGlobalState.get(cache);
    if (key.startsWith(INFINITE_PREFIX)) {
      return fetcher_(...args);
    }
    const req = PRELOAD[key];
    if (isUndefined(req))
      return fetcher_(...args);
    delete PRELOAD[key];
    return req;
  });
  return useSWRNext(key_, fetcher2, config);
};
var BUILT_IN_MIDDLEWARE = use.concat(middleware);
var withArgs = (hook) => {
  return function useSWRArgs(...args) {
    const fallbackConfig = useSWRConfig();
    const [key, fn, _config] = normalize(args);
    const config = mergeConfigs(fallbackConfig, _config);
    let next = hook;
    const { use: use3 } = config;
    const middleware2 = (use3 || []).concat(BUILT_IN_MIDDLEWARE);
    for (let i = middleware2.length; i--; ) {
      next = middleware2[i](next);
    }
    return next(key, fn || config.fetcher || null, config);
  };
};
var subscribeCallback = (key, callbacks, callback) => {
  const keyedRevalidators = callbacks[key] || (callbacks[key] = []);
  keyedRevalidators.push(callback);
  return () => {
    const index = keyedRevalidators.indexOf(callback);
    if (index >= 0) {
      keyedRevalidators[index] = keyedRevalidators[keyedRevalidators.length - 1];
      keyedRevalidators.pop();
    }
  };
};
setupDevTools();

// node_modules/swr/dist/core/index.mjs
var use2 = import_react6.default.use || ((promise) => {
  if (promise.status === "pending") {
    throw promise;
  } else if (promise.status === "fulfilled") {
    return promise.value;
  } else if (promise.status === "rejected") {
    throw promise.reason;
  } else {
    promise.status = "pending";
    promise.then((v) => {
      promise.status = "fulfilled";
      promise.value = v;
    }, (e) => {
      promise.status = "rejected";
      promise.reason = e;
    });
    throw promise;
  }
});
var WITH_DEDUPE = {
  dedupe: true
};
var useSWRHandler = (_key, fetcher2, config) => {
  const { cache: cache2, compare: compare2, suspense, fallbackData, revalidateOnMount, revalidateIfStale, refreshInterval, refreshWhenHidden, refreshWhenOffline, keepPreviousData } = config;
  const [EVENT_REVALIDATORS, MUTATION, FETCH, PRELOAD] = SWRGlobalState.get(cache2);
  const [key, fnArg] = serialize(_key);
  const initialMountedRef = (0, import_react6.useRef)(false);
  const unmountedRef = (0, import_react6.useRef)(false);
  const keyRef = (0, import_react6.useRef)(key);
  const fetcherRef = (0, import_react6.useRef)(fetcher2);
  const configRef = (0, import_react6.useRef)(config);
  const getConfig = () => configRef.current;
  const isActive = () => getConfig().isVisible() && getConfig().isOnline();
  const [getCache, setCache, subscribeCache, getInitialCache] = createCacheHelper(cache2, key);
  const stateDependencies = (0, import_react6.useRef)({}).current;
  const fallback = isUndefined(fallbackData) ? config.fallback[key] : fallbackData;
  const isEqual = (prev, current) => {
    for (const _ in stateDependencies) {
      const t = _;
      if (t === "data") {
        if (!compare2(prev[t], current[t])) {
          if (!isUndefined(prev[t])) {
            return false;
          }
          if (!compare2(returnedData, current[t])) {
            return false;
          }
        }
      } else {
        if (current[t] !== prev[t]) {
          return false;
        }
      }
    }
    return true;
  };
  const getSnapshot = (0, import_react6.useMemo)(() => {
    const shouldStartRequest = (() => {
      if (!key)
        return false;
      if (!fetcher2)
        return false;
      if (!isUndefined(revalidateOnMount))
        return revalidateOnMount;
      if (getConfig().isPaused())
        return false;
      if (suspense)
        return false;
      if (!isUndefined(revalidateIfStale))
        return revalidateIfStale;
      return true;
    })();
    const getSelectedCache = (state) => {
      const snapshot = mergeObjects(state);
      delete snapshot._k;
      if (!shouldStartRequest) {
        return snapshot;
      }
      return {
        isValidating: true,
        isLoading: true,
        ...snapshot
      };
    };
    const cachedData2 = getCache();
    const initialData = getInitialCache();
    const clientSnapshot = getSelectedCache(cachedData2);
    const serverSnapshot = cachedData2 === initialData ? clientSnapshot : getSelectedCache(initialData);
    let memorizedSnapshot = clientSnapshot;
    return [
      () => {
        const newSnapshot = getSelectedCache(getCache());
        const compareResult = isEqual(newSnapshot, memorizedSnapshot);
        if (compareResult) {
          memorizedSnapshot.data = newSnapshot.data;
          memorizedSnapshot.isLoading = newSnapshot.isLoading;
          memorizedSnapshot.isValidating = newSnapshot.isValidating;
          memorizedSnapshot.error = newSnapshot.error;
          return memorizedSnapshot;
        } else {
          memorizedSnapshot = newSnapshot;
          return newSnapshot;
        }
      },
      () => serverSnapshot
    ];
  }, [
    cache2,
    key
  ]);
  const cached = (0, import_shim.useSyncExternalStore)((0, import_react6.useCallback)(
    (callback) => subscribeCache(key, (current, prev) => {
      if (!isEqual(prev, current))
        callback();
    }),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [
      cache2,
      key
    ]
  ), getSnapshot[0], getSnapshot[1]);
  const isInitialMount = !initialMountedRef.current;
  const hasRevalidator = EVENT_REVALIDATORS[key] && EVENT_REVALIDATORS[key].length > 0;
  const cachedData = cached.data;
  const data = isUndefined(cachedData) ? fallback : cachedData;
  const error = cached.error;
  const laggyDataRef = (0, import_react6.useRef)(data);
  const returnedData = keepPreviousData ? isUndefined(cachedData) ? laggyDataRef.current : cachedData : data;
  const shouldDoInitialRevalidation = (() => {
    if (hasRevalidator && !isUndefined(error))
      return false;
    if (isInitialMount && !isUndefined(revalidateOnMount))
      return revalidateOnMount;
    if (getConfig().isPaused())
      return false;
    if (suspense)
      return isUndefined(data) ? false : revalidateIfStale;
    return isUndefined(data) || revalidateIfStale;
  })();
  const defaultValidatingState = !!(key && fetcher2 && isInitialMount && shouldDoInitialRevalidation);
  const isValidating = isUndefined(cached.isValidating) ? defaultValidatingState : cached.isValidating;
  const isLoading = isUndefined(cached.isLoading) ? defaultValidatingState : cached.isLoading;
  const revalidate = (0, import_react6.useCallback)(
    async (revalidateOpts) => {
      const currentFetcher = fetcherRef.current;
      if (!key || !currentFetcher || unmountedRef.current || getConfig().isPaused()) {
        return false;
      }
      let newData;
      let startAt;
      let loading = true;
      const opts = revalidateOpts || {};
      const shouldStartNewRequest = !FETCH[key] || !opts.dedupe;
      const callbackSafeguard = () => {
        if (IS_REACT_LEGACY) {
          return !unmountedRef.current && key === keyRef.current && initialMountedRef.current;
        }
        return key === keyRef.current;
      };
      const finalState = {
        isValidating: false,
        isLoading: false
      };
      const finishRequestAndUpdateState = () => {
        setCache(finalState);
      };
      const cleanupState = () => {
        const requestInfo = FETCH[key];
        if (requestInfo && requestInfo[1] === startAt) {
          delete FETCH[key];
        }
      };
      const initialState = {
        isValidating: true
      };
      if (isUndefined(getCache().data)) {
        initialState.isLoading = true;
      }
      try {
        if (shouldStartNewRequest) {
          setCache(initialState);
          if (config.loadingTimeout && isUndefined(getCache().data)) {
            setTimeout(() => {
              if (loading && callbackSafeguard()) {
                getConfig().onLoadingSlow(key, config);
              }
            }, config.loadingTimeout);
          }
          FETCH[key] = [
            currentFetcher(fnArg),
            getTimestamp()
          ];
        }
        [newData, startAt] = FETCH[key];
        newData = await newData;
        if (shouldStartNewRequest) {
          setTimeout(cleanupState, config.dedupingInterval);
        }
        if (!FETCH[key] || FETCH[key][1] !== startAt) {
          if (shouldStartNewRequest) {
            if (callbackSafeguard()) {
              getConfig().onDiscarded(key);
            }
          }
          return false;
        }
        finalState.error = UNDEFINED;
        const mutationInfo = MUTATION[key];
        if (!isUndefined(mutationInfo) && // case 1
        (startAt <= mutationInfo[0] || // case 2
        startAt <= mutationInfo[1] || // case 3
        mutationInfo[1] === 0)) {
          finishRequestAndUpdateState();
          if (shouldStartNewRequest) {
            if (callbackSafeguard()) {
              getConfig().onDiscarded(key);
            }
          }
          return false;
        }
        const cacheData = getCache().data;
        finalState.data = compare2(cacheData, newData) ? cacheData : newData;
        if (shouldStartNewRequest) {
          if (callbackSafeguard()) {
            getConfig().onSuccess(newData, key, config);
          }
        }
      } catch (err) {
        cleanupState();
        const currentConfig = getConfig();
        const { shouldRetryOnError } = currentConfig;
        if (!currentConfig.isPaused()) {
          finalState.error = err;
          if (shouldStartNewRequest && callbackSafeguard()) {
            currentConfig.onError(err, key, currentConfig);
            if (shouldRetryOnError === true || isFunction(shouldRetryOnError) && shouldRetryOnError(err)) {
              if (!getConfig().revalidateOnFocus || !getConfig().revalidateOnReconnect || isActive()) {
                currentConfig.onErrorRetry(err, key, currentConfig, (_opts) => {
                  const revalidators = EVENT_REVALIDATORS[key];
                  if (revalidators && revalidators[0]) {
                    revalidators[0](events.ERROR_REVALIDATE_EVENT, _opts);
                  }
                }, {
                  retryCount: (opts.retryCount || 0) + 1,
                  dedupe: true
                });
              }
            }
          }
        }
      }
      loading = false;
      finishRequestAndUpdateState();
      return true;
    },
    // `setState` is immutable, and `eventsCallback`, `fnArg`, and
    // `keyValidating` are depending on `key`, so we can exclude them from
    // the deps array.
    //
    // FIXME:
    // `fn` and `config` might be changed during the lifecycle,
    // but they might be changed every render like this.
    // `useSWR('key', () => fetch('/api/'), { suspense: true })`
    // So we omit the values from the deps array
    // even though it might cause unexpected behaviors.
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [
      key,
      cache2
    ]
  );
  const boundMutate = (0, import_react6.useCallback)(
    // Use callback to make sure `keyRef.current` returns latest result every time
    (...args) => {
      return internalMutate(cache2, keyRef.current, ...args);
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    []
  );
  useIsomorphicLayoutEffect(() => {
    fetcherRef.current = fetcher2;
    configRef.current = config;
    if (!isUndefined(cachedData)) {
      laggyDataRef.current = cachedData;
    }
  });
  useIsomorphicLayoutEffect(() => {
    if (!key)
      return;
    const softRevalidate = revalidate.bind(UNDEFINED, WITH_DEDUPE);
    let nextFocusRevalidatedAt = 0;
    const onRevalidate = (type, opts = {}) => {
      if (type == events.FOCUS_EVENT) {
        const now = Date.now();
        if (getConfig().revalidateOnFocus && now > nextFocusRevalidatedAt && isActive()) {
          nextFocusRevalidatedAt = now + getConfig().focusThrottleInterval;
          softRevalidate();
        }
      } else if (type == events.RECONNECT_EVENT) {
        if (getConfig().revalidateOnReconnect && isActive()) {
          softRevalidate();
        }
      } else if (type == events.MUTATE_EVENT) {
        return revalidate();
      } else if (type == events.ERROR_REVALIDATE_EVENT) {
        return revalidate(opts);
      }
      return;
    };
    const unsubEvents = subscribeCallback(key, EVENT_REVALIDATORS, onRevalidate);
    unmountedRef.current = false;
    keyRef.current = key;
    initialMountedRef.current = true;
    setCache({
      _k: fnArg
    });
    if (shouldDoInitialRevalidation) {
      if (isUndefined(data) || IS_SERVER) {
        softRevalidate();
      } else {
        rAF(softRevalidate);
      }
    }
    return () => {
      unmountedRef.current = true;
      unsubEvents();
    };
  }, [
    key
  ]);
  useIsomorphicLayoutEffect(() => {
    let timer;
    function next() {
      const interval = isFunction(refreshInterval) ? refreshInterval(getCache().data) : refreshInterval;
      if (interval && timer !== -1) {
        timer = setTimeout(execute, interval);
      }
    }
    function execute() {
      if (!getCache().error && (refreshWhenHidden || getConfig().isVisible()) && (refreshWhenOffline || getConfig().isOnline())) {
        revalidate(WITH_DEDUPE).then(next);
      } else {
        next();
      }
    }
    next();
    return () => {
      if (timer) {
        clearTimeout(timer);
        timer = -1;
      }
    };
  }, [
    refreshInterval,
    refreshWhenHidden,
    refreshWhenOffline,
    key
  ]);
  (0, import_react6.useDebugValue)(returnedData);
  if (suspense && isUndefined(data) && key) {
    if (!IS_REACT_LEGACY && IS_SERVER) {
      throw new Error("Fallback data is required when using suspense in SSR.");
    }
    fetcherRef.current = fetcher2;
    configRef.current = config;
    unmountedRef.current = false;
    const req = PRELOAD[key];
    if (!isUndefined(req)) {
      const promise = boundMutate(req);
      use2(promise);
    }
    if (isUndefined(error)) {
      const promise = revalidate(WITH_DEDUPE);
      if (!isUndefined(returnedData)) {
        promise.status = "fulfilled";
        promise.value = true;
      }
      use2(promise);
    } else {
      throw error;
    }
  }
  return {
    mutate: boundMutate,
    get data() {
      stateDependencies.data = true;
      return returnedData;
    },
    get error() {
      stateDependencies.error = true;
      return error;
    },
    get isValidating() {
      stateDependencies.isValidating = true;
      return isValidating;
    },
    get isLoading() {
      stateDependencies.isLoading = true;
      return isLoading;
    }
  };
};
var SWRConfig2 = OBJECT.defineProperty(SWRConfig, "defaultValue", {
  value: defaultConfig
});
var useSWR = withArgs(useSWRHandler);

// node_modules/react-tweet/dist/api/fetch-tweet.js
var TwitterApiError = class extends Error {
  constructor({ message, status, data }) {
    super(message);
    this.name = "TwitterApiError";
    this.status = status;
    this.data = data;
  }
};

// node_modules/react-tweet/dist/hooks.js
var useSWR2 = useSWR.default || useSWR;
var host = "https://react-tweet.vercel.app";
async function fetcher([url, fetchOptions]) {
  const res = await fetch(url, fetchOptions);
  const json = await res.json();
  if (res.ok)
    return json.data || null;
  throw new TwitterApiError({
    message: `Failed to fetch tweet at "${url}" with "${res.status}".`,
    data: json,
    status: res.status
  });
}
var useTweet = (id, apiUrl, fetchOptions) => {
  const { isLoading, data, error } = useSWR2(() => apiUrl || id ? [
    apiUrl || id && `${host}/api/tweet/${id}`,
    fetchOptions
  ] : null, fetcher, {
    revalidateIfStale: false,
    revalidateOnFocus: false,
    shouldRetryOnError: false
  });
  return {
    // If data is `undefined` then it might be the first render where SWR hasn't started doing
    // any work, so we set `isLoading` to `true`.
    isLoading: Boolean(isLoading || data === void 0 && !error),
    data,
    error
  };
};
var useMounted = () => {
  const [mounted, setMounted] = (0, import_react7.useState)(false);
  (0, import_react7.useEffect)(() => setMounted(true), []);
  return mounted;
};

// node_modules/react-tweet/dist/swr.js
var Tweet = ({ id, apiUrl, fallback = (0, import_jsx_runtime27.jsx)(TweetSkeleton, {}), components, fetchOptions, onError }) => {
  const { data, error, isLoading } = useTweet(id, apiUrl, fetchOptions);
  if (isLoading)
    return fallback;
  if (error || !data) {
    const NotFound = (components == null ? void 0 : components.TweetNotFound) || TweetNotFound;
    return (0, import_jsx_runtime27.jsx)(NotFound, {
      error: onError ? onError(error) : error
    });
  }
  return (0, import_jsx_runtime27.jsx)(EmbeddedTweet, {
    tweet: data,
    components
  });
};
export {
  EmbeddedTweet,
  QuotedTweet,
  QuotedTweetBody,
  QuotedTweetContainer,
  QuotedTweetHeader,
  Tweet,
  TweetActions,
  TweetActionsCopy,
  TweetBody,
  TweetContainer,
  TweetHeader,
  TweetInReplyTo,
  TweetInfo,
  TweetInfoCreatedAt,
  TweetLink,
  TweetMedia,
  TweetMediaVideo,
  TweetNotFound,
  TweetReplies,
  TweetSkeleton,
  Verified,
  VerifiedBusiness,
  VerifiedGovernment,
  enrichTweet,
  formatNumber,
  getMediaUrl,
  getMp4Video,
  getMp4Videos,
  useMounted,
  useTweet
};
/*! Bundled license information:

use-sync-external-store/cjs/use-sync-external-store-shim.development.js:
  (**
   * @license React
   * use-sync-external-store-shim.development.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/
//# sourceMappingURL=react-tweet.js.map
